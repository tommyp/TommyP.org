<!-- <script>
	// @ts-ignore
	import { Engine, Render, Runner, Bodies, Composite, Common, Vertices, Svg } from 'matter-js';
	// @ts-ignore
	import decomp from 'poly-decomp';
	import { loadSvg, select } from './graphics/utils';

	Common.setDecomp(decomp);

	// module aliases
	const container = document.querySelector('[data-matter-container]');

	// create an engine
	const engine = Engine.create();
	const world = engine.world;

	// create a renderer
	const render = Render.create({
		element: container,
		engine: engine,
		options: {
			width: window.innerWidth,
			height: container?.clientHeight || 0,
			background: 'transparent'
		}
	});

	const middle = window.innerWidth / 2;

	[
		'../svg/iconmonstr-check-mark-8-icon.svg',
		'../svg/iconmonstr-check-mark-8-icon.svg',
		'../svg/iconmonstr-check-mark-8-icon.svg',
		'../svg/iconmonstr-check-mark-8-icon.svg'
	].forEach((path, i) => {
		loadSvg(path).then((root) => {
			const color = Common.choose(['#f19648', '#f5d259', '#f55a3c', '#063e7b', '#ececd1']);

			const vertexSets = select(root, 'path').map((path) => {
				return Vertices.scale(Svg.pathToVertices(path, 30), 0.4, 0.4);
			});

			Composite.add(
				world,
				Bodies.fromVertices(
					100 + i * 150,
					200 + i * 50,
					vertexSets,
					{
						render: {
							fillStyle: color,
							strokeStyle: color,
							lineWidth: 1
						}
					},
					true
				)
			);
		});
	});

	const ground = Bodies.rectangle(middle, container?.clientHeight || 0, window.innerWidth, 1, {
		isStatic: true
	});

	// add all of the bodies to the world
	Composite.add(engine.world, [ground]);

	// run the renderer
	Render.run(render);

	// create runner
	const runner = Runner.create();

	// run the engine
	Runner.run(runner, engine);
</script>

<div data-matter-container></div>

<style>
	div {
		display: flex;
		flex-direction: column;
		height: 85dvh;
		justify-content: center;
		align-items: center;
	}
</style> -->
